// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Zvonobot API Test

const API_BASE_URL = 'http://localhost:8081/api';

/**
 * –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç Unicode-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
 */
function decodeUnicode(str) {
    return str.replace(/\\u([0-9a-fA-F]{4})/g, function(match, group) {
        return String.fromCharCode(parseInt(group, 16));
    });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
function showResult(message, type = 'success') {
    const decodedMessage = decodeUnicode(message);
    const resultDiv = document.getElementById('result');
    resultDiv.textContent = decodedMessage;
    resultDiv.className = `result ${type} fade-in`;
    resultDiv.style.display = 'block';
    
    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    resultDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É
 */
function showLoading(message) {
    showResult(message, 'loading');
}

/**
 * –ë–ª–æ–∫–∏—Ä—É–µ—Ç/—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏
 */
function setButtonsState(disabled) {
    const buttons = document.querySelectorAll('button');
    buttons.forEach(button => {
        button.disabled = disabled;
    });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
 */
function showProgress(message) {
    const resultDiv = document.getElementById('result');
    resultDiv.innerHTML = `
        <div style="text-align: center; padding: 20px;">
            <div style="margin-bottom: 15px;">${message}</div>
            <div style="width: 100%; height: 4px; background-color: #e9ecef; border-radius: 2px; overflow: hidden;">
                <div style="width: 100%; height: 100%; background-color: #007bff; animation: progress 2s ease-in-out infinite;"></div>
            </div>
        </div>
    `;
    resultDiv.className = 'result loading fade-in';
    resultDiv.style.display = 'block';
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
 */
async function sendRequest(endpoint, data) {
    try {
        setButtonsState(true);
        showProgress('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
        
        const response = await fetch(`${API_BASE_URL}/${endpoint}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=UTF-8',
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
            showResult(`‚úÖ –£—Å–ø–µ—à–Ω–æ!\n\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n${JSON.stringify(result, null, 2)}`, 'success');
        } else {
            showResult(`‚ùå –û—à–∏–±–∫–∞!\n\n${result.error}`, 'error');
        }
        
        return result;
    } catch (error) {
        showResult(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏!\n\n${error.message}`, 'error');
        throw error;
    } finally {
        setButtonsState(false);
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–ª—é—á
 */
async function testApiKey() {
    try {
        setButtonsState(true);
        showProgress('üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞...');
        
        const response = await fetch(`${API_BASE_URL}/test-api-key`, {
            method: 'GET'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showResult(`‚úÖ ${result.message}\n\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n${JSON.stringify(result.data, null, 2)}`, 'success');
        } else {
            showResult(`‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º!\n\n${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
        }
        
        return result;
    } catch (error) {
        showResult(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –∫–ª—é—á–∞!\n\n${error.message}`, 'error');
        throw error;
    } finally {
        setButtonsState(false);
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserProfile() {
    try {
        setButtonsState(true);
        showProgress('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        const response = await fetch(`${API_BASE_URL}/get-profile`, {
            method: 'GET'
        });
        const result = await response.json();
        if (result.success) {
            showResult(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω!\n\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n${JSON.stringify(result.data, null, 2)}`, 'success');
        } else {
            showResult(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n${result.error}`, 'error');
        }
    } catch (error) {
        showResult(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n${error.message}`, 'error');
        throw error;
    } finally {
        setButtonsState(false);
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥—è—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
 */
async function getOutgoingPhones() {
    try {
        setButtonsState(true);
        showProgress('üìû –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤...');
        
        const response = await fetch(`${API_BASE_URL}/get-phones`, {
            method: 'GET'
        });
        const result = await response.json();
        if (result.success) {
            showResult(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥—è—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤!\n\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n${JSON.stringify(result.data, null, 2)}`, 'success');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –Ω–æ–º–µ—Ä–∞–º–∏
            updatePhoneDropdowns(result.data);
        } else {
            showResult(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤!\n\n${result.error}`, 'error');
        }
    } catch (error) {
        showResult(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤!\n\n${error.message}`, 'error');
        throw error;
    } finally {
        setButtonsState(false);
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
 */
async function getRecords() {
    try {
        setButtonsState(true);
        showProgress('üéµ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤...');
        
        const response = await fetch(`${API_BASE_URL}/get-records`, {
            method: 'GET'
        });
        const result = await response.json();
        if (result.success) {
            if (result.data && result.data.length > 0) {
                showResult(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤!\n\n–î–æ—Å—Ç—É–ø–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.data.length}\n\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n${JSON.stringify(result.data, null, 2)}`, 'success');
            } else {
                showResult(`‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç!\n\n–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ.`, 'warning');
            }
        } else {
            showResult(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤!\n\n${result.error}`, 'error');
        }
    } catch (error) {
        showResult(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤!\n\n${error.message}`, 'error');
        throw error;
    } finally {
        setButtonsState(false);
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É SMS
 */
async function testSms() {
    const phone = '+77079621630';
    const text = '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ SMS —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.';
    const outgoingPhone = document.getElementById('sms-outgoing-phone').value;

    // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    let cleanPhone = phone.replace(/[\s\-\(\)\+]/g, '');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!/^7\d{10}$/.test(cleanPhone)) {
        showResult('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏!\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7XXXXXXXXXX\n\n–ü—Ä–∏–º–µ—Ä—ã:\n+7 707 962 16 30\n+7-707-962-16-30\n77079621630', 'error');
        return;
    }

    if (!text.trim()) {
        showResult('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏!\n\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error');
        return;
    }

    try {
        const requestData = { phone: cleanPhone, text };
        if (outgoingPhone && outgoingPhone.trim() !== '') {
            requestData.outgoingPhone = outgoingPhone;
        }
        await sendRequest('send-sms', requestData);
    } catch (error) {
        // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ sendRequest
    }
} 